/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2020 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

package org.opennms.netmgt.alarmd.usecases;

import java.util.Date;
import java.util.LinkedList;
import java.util.ArrayList;
import org.kie.api.time.SessionClock;
import org.opennms.netmgt.model.OnmsAlarm;
import org.opennms.netmgt.model.OnmsCategory;
import org.opennms.netmgt.model.OnmsSeverity;
import org.opennms.netmgt.model.OnmsEventParameter;
import org.opennms.netmgt.model.events.EventBuilder;

global org.opennms.netmgt.alarmd.drools.AlarmService alarmService;

declare org.opennms.netmgt.model.OnmsAlarm
    @role(event)
    @timestamp(lastUpdateTime)
end

declare PlayerInZone
   alarm : OnmsAlarm
   zone : String
   player : String
end

rule "add players to zones"
when
  $alarm : OnmsAlarm(alarmType == OnmsAlarm.PROBLEM_TYPE,
                     lastEvent != null,
                     lastEvent.eventUei in ( "uei.opennms.org/devjam/2020/minecraft/playerEnteredZone" ),
                     severity.isGreaterThanOrEqual(OnmsSeverity.NORMAL))
  $zoneParm : OnmsEventParameter( name == "zone" ) from $alarm.lastEvent.eventParameters
  $playerParm : OnmsEventParameter( name == "player" ) from $alarm.lastEvent.eventParameters
  not(PlayerInZone( alarm == $alarm ))
then
  insert(new PlayerInZone($alarm, $zoneParm.getValue(), $playerParm.getValue()));
end

rule "remove players from zones"
  when
    $playerInZone : PlayerInZone()
    not( OnmsAlarm( this == $playerInZone.alarm ) ) or OnmsAlarm( this == $playerInZone.alarm, severity.isLessThan(OnmsSeverity.NORMAL) )
  then
     retract($playerInZone);
end

rule "mousebar debug"
when
  $playersInZone : ArrayList() from collect(PlayerInZone(zone == "mousebar"))
then
  alarmService.info("There are currently {} players in the mousebar.", $playersInZone.size());
end

rule "mousebar over capacity"
when
  $playersInZone : ArrayList(size > 5) from collect(PlayerInZone(zone == "mousebar"))
then
  Date now = new Date(drools.getWorkingMemory().getSessionClock().getCurrentTime());
  EventBuilder eb = new EventBuilder("uei.opennms.org/devjam/2020/minecraft/zoneOverCapacity", "devjam2020");
  // Use the time from the session clock on the event
  eb.setTime(now);
  eb.setParam("zone", "mousebar");
  eb.setParam("players", Integer.toString($playersInZone.size()));
  // Asynchronously send the event
  alarmService.sendEvent(eb.getEvent());
end

rule "mousebar under capacity"
when
  $alarm : OnmsAlarm(alarmType == OnmsAlarm.PROBLEM_TYPE,
                     lastEvent != null,
                     lastEvent.eventUei in ( "uei.opennms.org/devjam/2020/minecraft/zoneOverCapacity" ),
                     severity.isGreaterThan(OnmsSeverity.NORMAL))
  OnmsEventParameter( name == "zone", value == "mousebar" ) from $alarm.lastEvent.eventParameters
  $playersInZone : ArrayList(size < 5) from collect(PlayerInZone(zone == "mousebar"))
then
  Date now = new Date(drools.getWorkingMemory().getSessionClock().getCurrentTime());
  EventBuilder eb = new EventBuilder("uei.opennms.org/devjam/2020/minecraft/zoneUnderCapacity", "devjam2020");
  // Use the time from the session clock on the event
  eb.setTime(now);
  eb.setParam("zone", "mousebar");
  // Asynchronously send the event
  alarmService.sendEvent(eb.getEvent());
end
